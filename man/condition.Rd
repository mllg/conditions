% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autogenerated.R, R/condition.R
\name{assertionMessage}
\alias{assertionMessage}
\alias{deprecatedMessage}
\alias{defunctMessage}
\alias{dimensionMessage}
\alias{futureMessage}
\alias{indexMessage}
\alias{ioMessage}
\alias{lengthMessage}
\alias{libraryMessage}
\alias{lookupMessage}
\alias{missingMessage}
\alias{nameMessage}
\alias{runtimeMessage}
\alias{typeMessage}
\alias{valueMessage}
\alias{assertionWarning}
\alias{deprecatedWarning}
\alias{defunctWarning}
\alias{dimensionWarning}
\alias{futureWarning}
\alias{indexWarning}
\alias{ioWarning}
\alias{lengthWarning}
\alias{libraryWarning}
\alias{lookupWarning}
\alias{missingWarning}
\alias{nameWarning}
\alias{runtimeWarning}
\alias{typeWarning}
\alias{valueWarning}
\alias{assertionError}
\alias{deprecatedError}
\alias{defunctError}
\alias{dimensionError}
\alias{futureError}
\alias{indexError}
\alias{ioError}
\alias{lengthError}
\alias{libraryError}
\alias{lookupError}
\alias{missingError}
\alias{nameError}
\alias{runtimeError}
\alias{typeError}
\alias{valueError}
\alias{condition}
\alias{condition_error}
\alias{condition_warning}
\alias{condition_message}
\title{Generate a custom condition}
\usage{
assertionMessage(message, call = sys.call(-1L), attach = NULL)

deprecatedMessage(message, call = sys.call(-1L), attach = NULL)

defunctMessage(message, call = sys.call(-1L), attach = NULL)

dimensionMessage(message, call = sys.call(-1L), attach = NULL)

futureMessage(message, call = sys.call(-1L), attach = NULL)

indexMessage(message, call = sys.call(-1L), attach = NULL)

ioMessage(message, call = sys.call(-1L), attach = NULL)

lengthMessage(message, call = sys.call(-1L), attach = NULL)

libraryMessage(message, call = sys.call(-1L), attach = NULL)

lookupMessage(message, call = sys.call(-1L), attach = NULL)

missingMessage(message, call = sys.call(-1L), attach = NULL)

nameMessage(message, call = sys.call(-1L), attach = NULL)

runtimeMessage(message, call = sys.call(-1L), attach = NULL)

typeMessage(message, call = sys.call(-1L), attach = NULL)

valueMessage(message, call = sys.call(-1L), attach = NULL)

assertionWarning(message, call = sys.call(-1L), attach = NULL)

deprecatedWarning(message, call = sys.call(-1L), attach = NULL)

defunctWarning(message, call = sys.call(-1L), attach = NULL)

dimensionWarning(message, call = sys.call(-1L), attach = NULL)

futureWarning(message, call = sys.call(-1L), attach = NULL)

indexWarning(message, call = sys.call(-1L), attach = NULL)

ioWarning(message, call = sys.call(-1L), attach = NULL)

lengthWarning(message, call = sys.call(-1L), attach = NULL)

libraryWarning(message, call = sys.call(-1L), attach = NULL)

lookupWarning(message, call = sys.call(-1L), attach = NULL)

missingWarning(message, call = sys.call(-1L), attach = NULL)

nameWarning(message, call = sys.call(-1L), attach = NULL)

runtimeWarning(message, call = sys.call(-1L), attach = NULL)

typeWarning(message, call = sys.call(-1L), attach = NULL)

valueWarning(message, call = sys.call(-1L), attach = NULL)

assertionError(message, call = sys.call(-1L), attach = NULL)

deprecatedError(message, call = sys.call(-1L), attach = NULL)

defunctError(message, call = sys.call(-1L), attach = NULL)

dimensionError(message, call = sys.call(-1L), attach = NULL)

futureError(message, call = sys.call(-1L), attach = NULL)

indexError(message, call = sys.call(-1L), attach = NULL)

ioError(message, call = sys.call(-1L), attach = NULL)

lengthError(message, call = sys.call(-1L), attach = NULL)

libraryError(message, call = sys.call(-1L), attach = NULL)

lookupError(message, call = sys.call(-1L), attach = NULL)

missingError(message, call = sys.call(-1L), attach = NULL)

nameError(message, call = sys.call(-1L), attach = NULL)

runtimeError(message, call = sys.call(-1L), attach = NULL)

typeError(message, call = sys.call(-1L), attach = NULL)

valueError(message, call = sys.call(-1L), attach = NULL)

condition(type, class = character(0L), message, call = sys.call(-1L))

condition_error(class, message, call = sys.call(-1L), attach = NULL)

condition_warning(class, message, call = sys.call(-1L), attach = NULL)

condition_message(class, message, call = sys.call(-1L), attach = NULL)
}
\arguments{
\item{message}{[\code{character(1)}]\cr
Information about the condition.}

\item{call}{[\code{call} | \code{NULL}]\cr
Call stack.}

\item{attach}{[ANY]\cr
Object to attach to the condition. Can be accessed via \code{cond$attached}
in a \code{\link[base]{tryCatch}} (see example).}

\item{type}{[\code{character(1)}]\cr
Should be one of \dQuote{error}, \dQuote{warning} or \dQuote{message}.}

\item{class}{[\code{character}]\cr
Class for the condition.
The functions \code{condition_error}, \code{condition_warning} and \code{condition_message}
automatically append the respective type with an underscore (see example).}
}
\value{
[\code{condition}].
}
\description{
\code{condition} creates a custom condition.
The functions \code{condition_message}, \code{condition_warning} and \code{condition_error}
are specialized to create conditions of type \dQuote{message}, \dQuote{warning} or \dQuote{error},
respectively. Furthermore, the constructors for some standardized conditions are predefined (see details).
}
\details{
The standardized conditions include:
\describe{
  \item{\dQuote{assertion}:}{Assertion (on user input) failed.}
  \item{\dQuote{deprecated}:}{Feature is deprecated.}
  \item{\dQuote{dimension}:}{Wrong dimension.}
  \item{\dQuote{future}:}{Feature is subject to change in the future.}
  \item{\dQuote{index}:}{Subscript out of range.}
  \item{\dQuote{io}:}{File/directory not found or accessible.}
  \item{\dQuote{length}:}{Wrong length.}
  \item{\dQuote{library}:}{Required package not installed.}
  \item{\dQuote{lookup}:}{Named subelement does not exist.}
  \item{\dQuote{missing}:}{Missing values.}
  \item{\dQuote{name}:}{Failed lookup of a global variable.}
  \item{\dQuote{runtime}:}{Something else which does not fit in any other category went wrong.}
  \item{\dQuote{type}:}{Unexpected type/class.}
  \item{\dQuote{value}:}{Inappropriate value.}
}
}
\examples{
# A simple IO error:
e = condition_error("io", "Failed to load file")
print(e)
class(e)

# To signal the condition, use message/warning/stop.
\dontrun{
message(e)
warning(e)
stop(e)
}

# These are equivalent (except the call):
w1 = condition("warning", "dimension_warning", "foo")
w2 = condition_warning("dimension", "foo")
w3 = tryCatch(dimension_warning("foo"), condition = function(e) e)

# Attach and retrieve additional information
f = function(x) {
  if(!is.numeric(x))
    assertion_error(" must be numeric", attach = x)
  x^2
}
f(1:10)

tryCatch(f(letters), assertion_error = function(e) {
  message("x must be numeric, but is ", typeof(e$attached))
})
}
